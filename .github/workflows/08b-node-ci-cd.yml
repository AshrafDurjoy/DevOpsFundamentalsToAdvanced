name: 08b - Node.js CI/CD Demo

on: 
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '**.js'
      - '**.json'
      - '.github/workflows/08b-node-ci-cd.yml'

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'  # Enable built-in npm caching
          
      - name: Create temporary package.json if not exists
        run: |
          if [ ! -f "package.json" ]; then
            echo "Creating demo package.json..."
            cat > package.json << 'EOL'
            {
              "name": "demo-project",
              "version": "1.0.0",
              "scripts": {
                "test": "echo 'Tests passed!'",
                "build": "mkdir -p dist && echo '<h1>Demo App</h1>' > dist/index.html",
                "lint": "echo 'No linting errors found'"
              }
            }
            EOL
            echo "Demo package.json created"
          fi
          
      - name: Install dependencies
        # Improved npm install with proper caching
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            # For demo purposes only
            echo "Simulating npm installation..."
            mkdir -p node_modules
            echo '// Demo module' > node_modules/demo.js
          fi
      
      - name: Run ESLint
        # Add proper error handling
        run: npm run lint || (echo "::warning::Linting issues detected, but continuing" && exit 0)

      # Add security scanning
      - name: Run security audit
        run: |
          echo "Running npm audit..."
          # In a real project, you would run: npm audit
          echo "No security vulnerabilities found!"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Create temporary package.json if not exists
        run: |
          if [ ! -f "package.json" ]; then
            echo "Creating demo package.json..."
            cat > package.json << 'EOL'
            {
              "name": "demo-project",
              "version": "1.0.0",
              "scripts": {
                "test": "echo 'Tests passed!'",
                "build": "mkdir -p dist && echo '<h1>Demo App</h1>' > dist/index.html",
                "lint": "echo 'No linting errors found'"
              }
            }
            EOL
            echo "Demo package.json created"
          fi
      
      - name: Install dependencies
        run: |
          # For demo purposes only - would be 'npm ci' in real scenario
          echo "Simulating npm installation..."
          mkdir -p node_modules
          echo '// Demo module' > node_modules/demo.js
      
      - name: Run tests with coverage
        run: |
          npm test
          mkdir -p coverage
          echo "Demo coverage report" > coverage/index.html
          echo '{"lines":80,"statements":75,"functions":90,"branches":70}' > coverage/coverage-summary.json
          
      # Add coverage report visualization
      - name: Process test coverage
        if: success()
        run: |
          echo "Test Coverage Summary:"
          cat coverage/coverage-summary.json | jq .
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/
          retention-days: 5

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Create temporary package.json if not exists
        run: |
          if [ ! -f "package.json" ]; then
            echo "Creating demo package.json..."
            cat > package.json << 'EOL'
            {
              "name": "demo-project",
              "version": "1.0.0",
              "scripts": {
                "test": "echo 'Tests passed!'",
                "build": "mkdir -p dist && echo '<h1>Demo App</h1>' > dist/index.html",
                "lint": "echo 'No linting errors found'"
              }
            }
            EOL
            echo "Demo package.json created"
          fi
      
      - name: Install dependencies
        run: |
          # For demo purposes only - would be 'npm ci' in real scenario
          echo "Simulating npm installation..."
          mkdir -p node_modules
          echo '// Demo module' > node_modules/demo.js
      
      - name: Build project
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/
          retention-days: 5

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
      
      - name: Deploy to production
        run: |
          echo "Deploying application to production..."
          echo "Files to deploy:"
          ls -la dist/
          echo "Application successfully deployed!"
          
      # Add post-deployment verification
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          echo "✅ Performing health check on deployed application"
          echo "✅ All services are up and running"
          
      # Add deployment notification
      - name: Send notification
        if: success()
        run: |
          echo "Sending deployment notification..."
          echo "✅ Application successfully deployed to production!"